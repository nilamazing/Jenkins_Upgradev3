pipeline {
    agent any
    stages {
        stage('Build Application') {
            steps {
                sh 'mvn -f java-tomcat-sample-docker/pom.xml clean package'
            }
        }
        stage("Archiving the artifacts"){
            steps{
                archiveArtifacts artifacts: '**/*.war'
            }
        }

        stage("Copying generated artifacts"){
            agent{
                label "docker"
            }
            steps{
                // copyArtifacts filter: '**/*.war', fingerprintArtifacts: true, projectName: 'Tomcat-Maven-Docker', selector: lastWithArtifacts(), target: '/home/ndutta/workspace/Tomcat-Maven-Docker/java-tomcat-sample-docker'
                //copyArtifacts fingerprintArtifacts: true, projectName: 'Tomcat-Maven-Docker', selector: specific('42'), target: '/home/ndutta/workspace/Tomcat-Maven-Docker/java-tomcat-sample-docker'
                copyArtifacts fingerprintArtifacts: true, projectName: 'Tomcat-Maven-Docker', selector: specific("${env.BUILD_ID}"), target: '/home/ndutta/workspace/Tomcat-Maven-Docker/java-tomcat-sample-docker'
            }
        }
    
        stage('Create Tomcat Docker Image'){
            agent{
                label "docker"
            }
            steps {
                sh "pwd"
                sh "ls java-tomcat-sample-docker/java-tomcat-sample-docker/"
                sh "ls java-tomcat-sample-docker/java-tomcat-sample-docker/target"
                sh "docker build ./java-tomcat-sample-docker -t tomcatsamplewebapp:${env.BUILD_ID}"
            }
        }
        stage("Creating Docker Container"){
            agent{
                label "docker"
            }
            steps{
                sh controller.sh
                // sh "Removing container with the same name"
                // sh "docker rm -f tomacatsamplecntnr"
                // sh "echo Creating container"
                // sh "docker run -p 7070:8080 -d --name tomacatsamplecntnr tomcatsamplewebapp:${env.BUILD_ID}"
            }
        }

    }
}